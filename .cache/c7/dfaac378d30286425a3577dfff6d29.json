{"id":"node_modules/javascript-natural-sort/naturalSort.js","dependencies":[{"name":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\package.json","includedInParent":true,"mtime":1579751683112},{"name":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\javascript-natural-sort\\package.json","includedInParent":true,"mtime":1579751682411}],"generated":{"js":"/*\r\n * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license\r\n * Author: Jim Palmer (based on chunking idea from Dave Koelle)\r\n */\r\n/*jshint unused:false */\r\nmodule.exports = function naturalSort (a, b) {\r\n\t\"use strict\";\r\n\tvar re = /(^([+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?$|^0x[0-9a-f]+$|\\d+)/gi,\r\n\t\tsre = /(^[ ]*|[ ]*$)/g,\r\n\t\tdre = /(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,\r\n\t\thre = /^0x[0-9a-f]+$/i,\r\n\t\tore = /^0/,\r\n\t\ti = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },\r\n\t\t// convert all to strings strip whitespace\r\n\t\tx = i(a).replace(sre, '') || '',\r\n\t\ty = i(b).replace(sre, '') || '',\r\n\t\t// chunk/tokenize\r\n\t\txN = x.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\tyN = y.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\t// numeric, hex or date detection\r\n\t\txD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),\r\n\t\tyD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,\r\n\t\toFxNcL, oFyNcL;\r\n\t// first try and sort Hex codes or Dates\r\n\tif (yD) {\r\n\t\tif ( xD < yD ) { return -1; }\r\n\t\telse if ( xD > yD ) { return 1; }\r\n\t}\r\n\t// natural sorting through split numeric strings and default strings\r\n\tfor(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\r\n\t\t// find floats not starting with '0', string or 0 if not defined (Clint Priest)\r\n\t\toFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;\r\n\t\toFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;\r\n\t\t// handle numeric vs string comparison - number < string - (Kyle Adams)\r\n\t\tif (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }\r\n\t\t// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\r\n\t\telse if (typeof oFxNcL !== typeof oFyNcL) {\r\n\t\t\toFxNcL += '';\r\n\t\t\toFyNcL += '';\r\n\t\t}\r\n\t\tif (oFxNcL < oFyNcL) { return -1; }\r\n\t\tif (oFxNcL > oFyNcL) { return 1; }\r\n\t}\r\n\treturn 0;\r\n};\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/javascript-natural-sort/naturalSort.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}}],"sources":{"node_modules/javascript-natural-sort/naturalSort.js":"/*\r\n * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license\r\n * Author: Jim Palmer (based on chunking idea from Dave Koelle)\r\n */\r\n/*jshint unused:false */\r\nmodule.exports = function naturalSort (a, b) {\r\n\t\"use strict\";\r\n\tvar re = /(^([+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?$|^0x[0-9a-f]+$|\\d+)/gi,\r\n\t\tsre = /(^[ ]*|[ ]*$)/g,\r\n\t\tdre = /(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,\r\n\t\thre = /^0x[0-9a-f]+$/i,\r\n\t\tore = /^0/,\r\n\t\ti = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },\r\n\t\t// convert all to strings strip whitespace\r\n\t\tx = i(a).replace(sre, '') || '',\r\n\t\ty = i(b).replace(sre, '') || '',\r\n\t\t// chunk/tokenize\r\n\t\txN = x.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\tyN = y.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\t// numeric, hex or date detection\r\n\t\txD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),\r\n\t\tyD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,\r\n\t\toFxNcL, oFyNcL;\r\n\t// first try and sort Hex codes or Dates\r\n\tif (yD) {\r\n\t\tif ( xD < yD ) { return -1; }\r\n\t\telse if ( xD > yD ) { return 1; }\r\n\t}\r\n\t// natural sorting through split numeric strings and default strings\r\n\tfor(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\r\n\t\t// find floats not starting with '0', string or 0 if not defined (Clint Priest)\r\n\t\toFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;\r\n\t\toFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;\r\n\t\t// handle numeric vs string comparison - number < string - (Kyle Adams)\r\n\t\tif (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }\r\n\t\t// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\r\n\t\telse if (typeof oFxNcL !== typeof oFyNcL) {\r\n\t\t\toFxNcL += '';\r\n\t\t\toFyNcL += '';\r\n\t\t}\r\n\t\tif (oFxNcL < oFyNcL) { return -1; }\r\n\t\tif (oFxNcL > oFyNcL) { return 1; }\r\n\t}\r\n\treturn 0;\r\n};\r\n"},"lineCount":46}},"error":null,"hash":"90ab70c1ca5a44cc244bd2cbeb854f9b","cacheData":{"env":{}}}