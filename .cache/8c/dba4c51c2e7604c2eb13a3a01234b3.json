{"id":"node_modules/mathjs/es/expression/function/parser.js","dependencies":[{"name":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\package.json","includedInParent":true,"mtime":1579751683112},{"name":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\package.json","includedInParent":true,"mtime":1579751683012},{"name":"../../utils/factory","loc":{"line":1,"column":24},"parent":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\es\\expression\\function\\parser.js","resolved":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\es\\utils\\factory.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createParser = void 0;\n\nvar _factory = require(\"../../utils/factory\");\n\nvar name = 'parser';\nvar dependencies = ['typed', 'Parser'];\nvar createParser =\n/* #__PURE__ */\n(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Parser = _ref.Parser;\n  /**\n   * Create a parser. The function creates a new `math.Parser` object.\n   *\n   * Syntax:\n   *\n   *    math.parser()\n   *\n   * Examples:\n   *\n   *     const parser = new math.parser()\n   *\n   *     // evaluate expressions\n   *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5\n   *     const b = parser.evaluate('sqrt(-4)')        // 2i\n   *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm\n   *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476\n   *\n   *     // define variables and functions\n   *     parser.evaluate('x = 7 / 2')                 // 3.5\n   *     parser.evaluate('x + 3')                     // 6.5\n   *     parser.evaluate('function f(x, y) = x^y')    // f(x, y)\n   *     parser.evaluate('f(2, 3)')                   // 8\n   *\n   *     // get and set variables and functions\n   *     const x = parser.get('x')                // 7\n   *     const f = parser.get('f')                // function\n   *     const g = f(3, 2)                        // 9\n   *     parser.set('h', 500)\n   *     const i = parser.evaluate('h / 2')       // 250\n   *     parser.set('hello', function (name) {\n   *       return 'hello, ' + name + '!'\n   *     })\n   *     parser.evaluate('hello(\"user\")')         // \"hello, user!\"\n   *\n   *     // clear defined functions and variables\n   *     parser.clear()\n   *\n   * See also:\n   *\n   *    evaluate, compile, parse\n   *\n   * @return {Parser} Parser\n   */\n\n  return typed(name, {\n    '': function _() {\n      return new Parser();\n    }\n  });\n});\nexports.createParser = createParser;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":2,"column":0}},{"name":"name","generated":{"line":10,"column":4},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":2,"column":4}},{"generated":{"line":10,"column":8},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":2,"column":8}},{"generated":{"line":10,"column":11},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":2,"column":11}},{"generated":{"line":10,"column":19},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":2,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":3,"column":0}},{"name":"dependencies","generated":{"line":11,"column":4},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":3,"column":4}},{"generated":{"line":11,"column":16},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":3,"column":16}},{"generated":{"line":11,"column":19},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":3,"column":19}},{"generated":{"line":11,"column":20},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":3,"column":20}},{"generated":{"line":11,"column":27},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":3,"column":19}},{"generated":{"line":11,"column":29},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":3,"column":29}},{"generated":{"line":11,"column":37},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":3,"column":19}},{"generated":{"line":11,"column":38},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":3,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":4,"column":7}},{"name":"createParser","generated":{"line":12,"column":4},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":4,"column":11}},{"generated":{"line":12,"column":16},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":4,"column":23}},{"generated":{"line":13,"column":0},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":5,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":6,"column":0}},{"name":"name","generated":{"line":14,"column":22},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":6,"column":8}},{"generated":{"line":14,"column":26},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":6,"column":0}},{"name":"dependencies","generated":{"line":14,"column":28},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":6,"column":14}},{"generated":{"line":14,"column":40},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":6,"column":0}},{"generated":{"line":14,"column":42},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":6,"column":28}},{"name":"_ref","generated":{"line":14,"column":52},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":6,"column":38}},{"generated":{"line":14,"column":56},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":6,"column":28}},{"generated":{"line":14,"column":58},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":6,"column":44}},{"generated":{"line":15,"column":0},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":7,"column":2}},{"name":"typed","generated":{"line":15,"column":6},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":7,"column":6}},{"generated":{"line":15,"column":11},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":7,"column":11}},{"name":"_ref","generated":{"line":15,"column":14},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":7,"column":14}},{"generated":{"line":15,"column":18},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":7,"column":18}},{"name":"typed","generated":{"line":15,"column":19},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":7,"column":19}},{"generated":{"line":15,"column":24},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":7,"column":2}},{"generated":{"line":16,"column":0},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":7,"column":2}},{"name":"Parser","generated":{"line":16,"column":6},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":8,"column":6}},{"generated":{"line":16,"column":12},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":8,"column":12}},{"name":"_ref","generated":{"line":16,"column":15},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":8,"column":15}},{"generated":{"line":16,"column":19},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":8,"column":19}},{"name":"Parser","generated":{"line":16,"column":20},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":8,"column":20}},{"generated":{"line":16,"column":26},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":7,"column":2}},{"generated":{"line":17,"column":0},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":10,"column":2}},{"generated":{"line":61,"column":0},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":53,"column":2}},{"name":"typed","generated":{"line":61,"column":9},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":53,"column":9}},{"generated":{"line":61,"column":14},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":53,"column":14}},{"name":"name","generated":{"line":61,"column":15},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":53,"column":15}},{"generated":{"line":61,"column":19},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":53,"column":14}},{"generated":{"line":61,"column":21},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":53,"column":21}},{"generated":{"line":62,"column":0},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":54,"column":4}},{"generated":{"line":62,"column":8},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":54,"column":8}},{"name":"_","generated":{"line":62,"column":17},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":54,"column":17}},{"generated":{"line":62,"column":18},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":54,"column":8}},{"generated":{"line":62,"column":21},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":54,"column":21}},{"generated":{"line":63,"column":0},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":55,"column":6}},{"generated":{"line":63,"column":13},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":55,"column":13}},{"name":"Parser","generated":{"line":63,"column":17},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":55,"column":17}},{"generated":{"line":63,"column":23},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":55,"column":13}},{"generated":{"line":63,"column":25},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":55,"column":6}},{"generated":{"line":64,"column":0},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":56,"column":5}},{"generated":{"line":65,"column":0},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":53,"column":21}},{"generated":{"line":65,"column":3},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":53,"column":14}},{"generated":{"line":65,"column":4},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":53,"column":2}},{"generated":{"line":66,"column":0},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":58,"column":1}},{"generated":{"line":66,"column":1},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":6,"column":0}},{"generated":{"line":66,"column":2},"source":"node_modules/mathjs/es/expression/function/parser.js","original":{"line":4,"column":7}}],"sources":{"node_modules/mathjs/es/expression/function/parser.js":"import { factory } from '../../utils/factory';\nvar name = 'parser';\nvar dependencies = ['typed', 'Parser'];\nexport var createParser =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Parser = _ref.Parser;\n\n  /**\n   * Create a parser. The function creates a new `math.Parser` object.\n   *\n   * Syntax:\n   *\n   *    math.parser()\n   *\n   * Examples:\n   *\n   *     const parser = new math.parser()\n   *\n   *     // evaluate expressions\n   *     const a = parser.evaluate('sqrt(3^2 + 4^2)') // 5\n   *     const b = parser.evaluate('sqrt(-4)')        // 2i\n   *     const c = parser.evaluate('2 inch in cm')    // 5.08 cm\n   *     const d = parser.evaluate('cos(45 deg)')     // 0.7071067811865476\n   *\n   *     // define variables and functions\n   *     parser.evaluate('x = 7 / 2')                 // 3.5\n   *     parser.evaluate('x + 3')                     // 6.5\n   *     parser.evaluate('function f(x, y) = x^y')    // f(x, y)\n   *     parser.evaluate('f(2, 3)')                   // 8\n   *\n   *     // get and set variables and functions\n   *     const x = parser.get('x')                // 7\n   *     const f = parser.get('f')                // function\n   *     const g = f(3, 2)                        // 9\n   *     parser.set('h', 500)\n   *     const i = parser.evaluate('h / 2')       // 250\n   *     parser.set('hello', function (name) {\n   *       return 'hello, ' + name + '!'\n   *     })\n   *     parser.evaluate('hello(\"user\")')         // \"hello, user!\"\n   *\n   *     // clear defined functions and variables\n   *     parser.clear()\n   *\n   * See also:\n   *\n   *    evaluate, compile, parse\n   *\n   * @return {Parser} Parser\n   */\n  return typed(name, {\n    '': function _() {\n      return new Parser();\n    }\n  });\n});"},"lineCount":null}},"error":null,"hash":"fd16ad5af147afda2b0f972635886840","cacheData":{"env":{}}}