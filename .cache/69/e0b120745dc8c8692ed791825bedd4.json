{"id":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","dependencies":[{"name":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\package.json","includedInParent":true,"mtime":1579751683112},{"name":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\package.json","includedInParent":true,"mtime":1579751683012},{"name":"../../utils/factory","loc":{"line":1,"column":24},"parent":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\es\\function\\matrix\\getMatrixDataType.js","resolved":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\es\\utils\\factory.js"},{"name":"../../utils/array","loc":{"line":2,"column":33},"parent":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\es\\function\\matrix\\getMatrixDataType.js","resolved":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\es\\utils\\array.js"},{"name":"../../utils/is","loc":{"line":3,"column":23},"parent":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\es\\function\\matrix\\getMatrixDataType.js","resolved":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\es\\utils\\is.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGetMatrixDataType = void 0;\n\nvar _factory = require(\"../../utils/factory\");\n\nvar _array = require(\"../../utils/array\");\n\nvar _is = require(\"../../utils/is\");\n\nvar name = 'getMatrixDataType';\nvar dependencies = ['typed'];\nvar createGetMatrixDataType =\n/* #__PURE__ */\n(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Find the data type of all elements in a matrix or array,\n   * for example 'number' if all items are a number and 'Complex' if all values\n   * are complex numbers.\n   * If a matrix contains more than one data type, it will return 'mixed'.\n   *\n   * Syntax:\n   *\n   *    math.getMatrixDataType(x)\n   *\n   * Examples:\n   *\n   *    const x = [ [1, 2, 3], [4, 5, 6] ]\n   *    const mixedX = [ [1, true], [2, 3] ]\n   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]\n   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]\n   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]\n   *    const sparse = math.sparse(x)\n   *    const dense = math.matrix(x)\n   *    math.getMatrixDataType(x)   // returns 'number'\n   *    math.getMatrixDataType(sparse)   // returns 'number'\n   *    math.getMatrixDataType(dense)   // returns 'number'\n   *    math.getMatrixDataType(mixedX) // returns 'mixed'\n   *    math.getMatrixDataType(fractionX) // returns 'Fraction'\n   *    math.getMatrixDataType(unitX) // returns 'Unit'\n   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'\n   *\n   * See also:\n   *  SparseMatrix, DenseMatrix\n   *\n   * @param {...Matrix | Array} x   The Matrix with values.\n   *\n   * @return {string} A string representation of the matrix type\n   */\n\n  return typed(name, {\n    Array: function Array(x) {\n      return (0, _array.getArrayDataType)(x, _is.typeOf);\n    },\n    Matrix: function Matrix(x) {\n      return x.getDataType();\n    }\n  });\n});\nexports.createGetMatrixDataType = createGetMatrixDataType;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":2,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":3,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":4,"column":0}},{"name":"name","generated":{"line":14,"column":4},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":4,"column":4}},{"generated":{"line":14,"column":8},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":4,"column":8}},{"generated":{"line":14,"column":11},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":4,"column":11}},{"generated":{"line":14,"column":30},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":4,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":5,"column":0}},{"name":"dependencies","generated":{"line":15,"column":4},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":5,"column":4}},{"generated":{"line":15,"column":16},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":5,"column":16}},{"generated":{"line":15,"column":19},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":5,"column":19}},{"generated":{"line":15,"column":20},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":5,"column":20}},{"generated":{"line":15,"column":27},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":5,"column":19}},{"generated":{"line":15,"column":28},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":5,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":6,"column":7}},{"name":"createGetMatrixDataType","generated":{"line":16,"column":4},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":6,"column":11}},{"generated":{"line":16,"column":27},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":6,"column":34}},{"generated":{"line":17,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":7,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":8,"column":0}},{"name":"name","generated":{"line":18,"column":22},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":8,"column":8}},{"generated":{"line":18,"column":26},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":8,"column":0}},{"name":"dependencies","generated":{"line":18,"column":28},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":8,"column":14}},{"generated":{"line":18,"column":40},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":8,"column":0}},{"generated":{"line":18,"column":42},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":8,"column":28}},{"name":"_ref","generated":{"line":18,"column":52},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":8,"column":38}},{"generated":{"line":18,"column":56},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":8,"column":28}},{"generated":{"line":18,"column":58},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":8,"column":44}},{"generated":{"line":19,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":9,"column":2}},{"name":"typed","generated":{"line":19,"column":6},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":9,"column":6}},{"generated":{"line":19,"column":11},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":9,"column":11}},{"name":"_ref","generated":{"line":19,"column":14},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":9,"column":14}},{"generated":{"line":19,"column":18},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":9,"column":18}},{"name":"typed","generated":{"line":19,"column":19},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":9,"column":19}},{"generated":{"line":19,"column":24},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":9,"column":2}},{"generated":{"line":20,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":11,"column":2}},{"generated":{"line":55,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":45,"column":2}},{"name":"typed","generated":{"line":55,"column":9},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":45,"column":9}},{"generated":{"line":55,"column":14},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":45,"column":14}},{"name":"name","generated":{"line":55,"column":15},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":45,"column":15}},{"generated":{"line":55,"column":19},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":45,"column":14}},{"generated":{"line":55,"column":21},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":45,"column":21}},{"name":"Array","generated":{"line":56,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":46,"column":4}},{"name":"Array","generated":{"line":56,"column":4},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":46,"column":4}},{"generated":{"line":56,"column":9},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":46,"column":9}},{"generated":{"line":56,"column":11},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":46,"column":11}},{"name":"Array","generated":{"line":56,"column":20},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":46,"column":20}},{"generated":{"line":56,"column":25},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":46,"column":11}},{"name":"x","generated":{"line":56,"column":26},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":46,"column":26}},{"generated":{"line":56,"column":27},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":46,"column":11}},{"generated":{"line":56,"column":29},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":46,"column":29}},{"generated":{"line":57,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":47,"column":6}},{"generated":{"line":57,"column":13},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":47,"column":13}},{"name":"x","generated":{"line":57,"column":42},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":47,"column":30}},{"generated":{"line":57,"column":43},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":47,"column":13}},{"name":"typeOf","generated":{"line":57,"column":45},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":47,"column":33}},{"generated":{"line":57,"column":55},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":47,"column":13}},{"generated":{"line":57,"column":56},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":47,"column":6}},{"generated":{"line":58,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":48,"column":5}},{"generated":{"line":58,"column":5},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":45,"column":21}},{"name":"Matrix","generated":{"line":59,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":49,"column":4}},{"name":"Matrix","generated":{"line":59,"column":4},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":49,"column":4}},{"generated":{"line":59,"column":10},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":49,"column":10}},{"generated":{"line":59,"column":12},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":49,"column":12}},{"name":"Matrix","generated":{"line":59,"column":21},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":49,"column":21}},{"generated":{"line":59,"column":27},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":49,"column":12}},{"name":"x","generated":{"line":59,"column":28},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":49,"column":28}},{"generated":{"line":59,"column":29},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":49,"column":12}},{"generated":{"line":59,"column":31},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":49,"column":31}},{"generated":{"line":60,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":50,"column":6}},{"name":"x","generated":{"line":60,"column":13},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":50,"column":13}},{"generated":{"line":60,"column":14},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":50,"column":14}},{"name":"getDataType","generated":{"line":60,"column":15},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":50,"column":15}},{"generated":{"line":60,"column":26},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":50,"column":13}},{"generated":{"line":60,"column":28},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":50,"column":6}},{"generated":{"line":61,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":51,"column":5}},{"generated":{"line":62,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":45,"column":21}},{"generated":{"line":62,"column":3},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":45,"column":14}},{"generated":{"line":62,"column":4},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":45,"column":2}},{"generated":{"line":63,"column":0},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":53,"column":1}},{"generated":{"line":63,"column":1},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":8,"column":0}},{"generated":{"line":63,"column":2},"source":"node_modules/mathjs/es/function/matrix/getMatrixDataType.js","original":{"line":6,"column":7}}],"sources":{"node_modules/mathjs/es/function/matrix/getMatrixDataType.js":"import { factory } from '../../utils/factory';\nimport { getArrayDataType } from '../../utils/array';\nimport { typeOf } from '../../utils/is';\nvar name = 'getMatrixDataType';\nvar dependencies = ['typed'];\nexport var createGetMatrixDataType =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Find the data type of all elements in a matrix or array,\n   * for example 'number' if all items are a number and 'Complex' if all values\n   * are complex numbers.\n   * If a matrix contains more than one data type, it will return 'mixed'.\n   *\n   * Syntax:\n   *\n   *    math.getMatrixDataType(x)\n   *\n   * Examples:\n   *\n   *    const x = [ [1, 2, 3], [4, 5, 6] ]\n   *    const mixedX = [ [1, true], [2, 3] ]\n   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]\n   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]\n   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]\n   *    const sparse = math.sparse(x)\n   *    const dense = math.matrix(x)\n   *    math.getMatrixDataType(x)   // returns 'number'\n   *    math.getMatrixDataType(sparse)   // returns 'number'\n   *    math.getMatrixDataType(dense)   // returns 'number'\n   *    math.getMatrixDataType(mixedX) // returns 'mixed'\n   *    math.getMatrixDataType(fractionX) // returns 'Fraction'\n   *    math.getMatrixDataType(unitX) // returns 'Unit'\n   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'\n   *\n   * See also:\n   *  SparseMatrix, DenseMatrix\n   *\n   * @param {...Matrix | Array} x   The Matrix with values.\n   *\n   * @return {string} A string representation of the matrix type\n   */\n  return typed(name, {\n    Array: function Array(x) {\n      return getArrayDataType(x, typeOf);\n    },\n    Matrix: function Matrix(x) {\n      return x.getDataType();\n    }\n  });\n});"},"lineCount":null}},"error":null,"hash":"a179c99019a785fbe03f042f3b0c1d49","cacheData":{"env":{}}}