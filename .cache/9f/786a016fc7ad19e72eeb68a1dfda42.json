{"id":"node_modules/mathjs/es/utils/complex.js","dependencies":[{"name":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\package.json","includedInParent":true,"mtime":1579751683112},{"name":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\package.json","includedInParent":true,"mtime":1579751683012},{"name":"./number","loc":{"line":1,"column":28},"parent":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\es\\utils\\complex.js","resolved":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\es\\utils\\number.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.complexEquals = complexEquals;\n\nvar _number = require(\"./number\");\n\n/**\n * Test whether two complex values are equal provided a given epsilon.\n * Does not use or change the global Complex.EPSILON setting\n * @param {Complex} x\n * @param {Complex} y\n * @param {number} epsilon\n * @returns {boolean}\n */\nfunction complexEquals(x, y, epsilon) {\n  return (0, _number.nearlyEqual)(x.re, y.re, epsilon) && (0, _number.nearlyEqual)(x.im, y.im, epsilon);\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":2,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":11,"column":7}},{"name":"complexEquals","generated":{"line":18,"column":9},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":11,"column":16}},{"generated":{"line":18,"column":22},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":11,"column":7}},{"name":"x","generated":{"line":18,"column":23},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":11,"column":30}},{"generated":{"line":18,"column":24},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":11,"column":7}},{"name":"y","generated":{"line":18,"column":26},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":11,"column":33}},{"generated":{"line":18,"column":27},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":11,"column":7}},{"name":"epsilon","generated":{"line":18,"column":29},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":11,"column":36}},{"generated":{"line":18,"column":36},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":11,"column":7}},{"generated":{"line":18,"column":38},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":11,"column":45}},{"generated":{"line":19,"column":0},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":2}},{"generated":{"line":19,"column":9},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":9}},{"name":"x","generated":{"line":19,"column":34},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":21}},{"generated":{"line":19,"column":35},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":22}},{"name":"re","generated":{"line":19,"column":36},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":23}},{"generated":{"line":19,"column":38},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":9}},{"name":"y","generated":{"line":19,"column":40},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":27}},{"generated":{"line":19,"column":41},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":28}},{"name":"re","generated":{"line":19,"column":42},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":29}},{"generated":{"line":19,"column":44},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":9}},{"name":"epsilon","generated":{"line":19,"column":46},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":33}},{"generated":{"line":19,"column":53},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":9}},{"generated":{"line":19,"column":58},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":45}},{"name":"x","generated":{"line":19,"column":83},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":57}},{"generated":{"line":19,"column":84},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":58}},{"name":"im","generated":{"line":19,"column":85},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":59}},{"generated":{"line":19,"column":87},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":45}},{"name":"y","generated":{"line":19,"column":89},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":63}},{"generated":{"line":19,"column":90},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":64}},{"name":"im","generated":{"line":19,"column":91},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":65}},{"generated":{"line":19,"column":93},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":45}},{"name":"epsilon","generated":{"line":19,"column":95},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":69}},{"generated":{"line":19,"column":102},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":45}},{"generated":{"line":19,"column":103},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":12,"column":2}},{"generated":{"line":20,"column":0},"source":"node_modules/mathjs/es/utils/complex.js","original":{"line":13,"column":1}}],"sources":{"node_modules/mathjs/es/utils/complex.js":"import { nearlyEqual } from './number';\n/**\n * Test whether two complex values are equal provided a given epsilon.\n * Does not use or change the global Complex.EPSILON setting\n * @param {Complex} x\n * @param {Complex} y\n * @param {number} epsilon\n * @returns {boolean}\n */\n\nexport function complexEquals(x, y, epsilon) {\n  return nearlyEqual(x.re, y.re, epsilon) && nearlyEqual(x.im, y.im, epsilon);\n}"},"lineCount":null}},"error":null,"hash":"f3b2def41c52374bef4ca2c8747d6f36","cacheData":{"env":{}}}