{"id":"node_modules/mathjs/es/function/string/format.js","dependencies":[{"name":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\package.json","includedInParent":true,"mtime":1579751683112},{"name":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\package.json","includedInParent":true,"mtime":1579751683012},{"name":"../../utils/string","loc":{"line":1,"column":39},"parent":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\es\\function\\string\\format.js","resolved":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\es\\utils\\string.js"},{"name":"../../utils/factory","loc":{"line":2,"column":24},"parent":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\es\\function\\string\\format.js","resolved":"C:\\Users\\bugat\\developer\\CalculusVisualizer\\node_modules\\mathjs\\es\\utils\\factory.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFormat = void 0;\n\nvar _string = require(\"../../utils/string\");\n\nvar _factory = require(\"../../utils/factory\");\n\nvar name = 'format';\nvar dependencies = ['typed'];\nvar createFormat =\n/* #__PURE__ */\n(0, _factory.factory)(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n  /**\n   * Format a value of any type into a string.\n   *\n   * Syntax:\n   *\n   *    math.format(value)\n   *    math.format(value, options)\n   *    math.format(value, precision)\n   *    math.format(value, callback)\n   *\n   * Where:\n   *\n   *  - `value: *`\n   *    The value to be formatted\n   *  - `options: Object`\n   *    An object with formatting options. Available options:\n   *    - `notation: string`\n   *      Number notation. Choose from:\n   *      - 'fixed'\n   *        Always use regular number notation.\n   *        For example '123.40' and '14000000'\n   *      - 'exponential'\n   *        Always use exponential notation.\n   *        For example '1.234e+2' and '1.4e+7'\n   *      - 'engineering'\n   *        Always use engineering notation.\n   *        For example '123.4e+0' and '14.0e+6'\n   *      - 'auto' (default)\n   *        Regular number notation for numbers having an absolute value between\n   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.\n   *        Lower bound is included, upper bound is excluded.\n   *        For example '123.4' and '1.4e7'.\n   *    - `precision: number`\n   *      A number between 0 and 16 to round the digits of the number. In case\n   *      of notations 'exponential', 'engineering', and 'auto', `precision`\n   *      defines the total number of significant digits returned.\n   *      In case of notation 'fixed', `precision` defines the number of\n   *      significant digits after the decimal point.\n   *      `precision` is undefined by default.\n   *    - `lowerExp: number`\n   *      Exponent determining the lower boundary for formatting a value with\n   *      an exponent when `notation='auto`. Default value is `-3`.\n   *    - `upperExp: number`\n   *      Exponent determining the upper boundary for formatting a value with\n   *      an exponent when `notation='auto`. Default value is `5`.\n   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.\n   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is\n   *      configured, and will output `0.(3)` when 'decimal' is configured.\n   * - `callback: function`\n   *   A custom formatting function, invoked for all numeric elements in `value`,\n   *   for example all elements of a matrix, or the real and imaginary\n   *   parts of a complex number. This callback can be used to override the\n   *   built-in numeric notation with any type of formatting. Function `callback`\n   *   is called with `value` as parameter and must return a string.\n   *\n   * When `value` is an Object:\n   *\n   * - When the object contains a property `format` being a function, this function\n   *   is invoked as `value.format(options)` and the result is returned.\n   * - When the object has its own `toString` method, this method is invoked\n   *   and the result is returned.\n   * - In other cases the function will loop over all object properties and\n   *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n   *\n   * When value is a function:\n   *\n   * - When the function has a property `syntax`, it returns this\n   *   syntax description.\n   * - In other cases, a string `'function'` is returned.\n   *\n   * Examples:\n   *\n   *    math.format(6.4)                                        // returns '6.4'\n   *    math.format(1240000)                                    // returns '1.24e6'\n   *    math.format(1/3)                                        // returns '0.3333333333333333'\n   *    math.format(1/3, 3)                                     // returns '0.333'\n   *    math.format(21385, 2)                                   // returns '21000'\n   *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'\n   *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'\n   *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'\n   *    math.format(12400,{notation: 'engineering'})            // returns '12.400e+3'\n   *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'\n   *\n   *    function formatCurrency(value) {\n   *      // return currency notation with two digits:\n   *      return '$' + value.toFixed(2)\n   *\n   *      // you could also use math.format inside the callback:\n   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})\n   *    }\n   *    math.format([2.1, 3, 0.016], formatCurrency}            // returns '[$2.10, $3.00, $0.02]'\n   *\n   * See also:\n   *\n   *    print\n   *\n   * @param {*} value                               Value to be stringified\n   * @param {Object | Function | number} [options]  Formatting options\n   * @return {string} The formatted value\n   */\n\n  return typed(name, {\n    any: _string.format,\n    'any, Object | function | number': _string.format\n  });\n});\nexports.createFormat = createFormat;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":2,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":3,"column":0}},{"name":"name","generated":{"line":12,"column":4},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":3,"column":4}},{"generated":{"line":12,"column":8},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":3,"column":8}},{"generated":{"line":12,"column":11},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":3,"column":11}},{"generated":{"line":12,"column":19},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":3,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":4,"column":0}},{"name":"dependencies","generated":{"line":13,"column":4},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":4,"column":4}},{"generated":{"line":13,"column":16},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":4,"column":16}},{"generated":{"line":13,"column":19},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":4,"column":19}},{"generated":{"line":13,"column":20},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":4,"column":20}},{"generated":{"line":13,"column":27},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":4,"column":19}},{"generated":{"line":13,"column":28},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":4,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":5,"column":7}},{"name":"createFormat","generated":{"line":14,"column":4},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":5,"column":11}},{"generated":{"line":14,"column":16},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":5,"column":23}},{"generated":{"line":15,"column":0},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":6,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":7,"column":0}},{"name":"name","generated":{"line":16,"column":22},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":7,"column":8}},{"generated":{"line":16,"column":26},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":7,"column":0}},{"name":"dependencies","generated":{"line":16,"column":28},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":7,"column":14}},{"generated":{"line":16,"column":40},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":7,"column":0}},{"generated":{"line":16,"column":42},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":7,"column":28}},{"name":"_ref","generated":{"line":16,"column":52},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":7,"column":38}},{"generated":{"line":16,"column":56},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":7,"column":28}},{"generated":{"line":16,"column":58},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":7,"column":44}},{"generated":{"line":17,"column":0},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":8,"column":2}},{"name":"typed","generated":{"line":17,"column":6},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":8,"column":6}},{"generated":{"line":17,"column":11},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":8,"column":11}},{"name":"_ref","generated":{"line":17,"column":14},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":8,"column":14}},{"generated":{"line":17,"column":18},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":8,"column":18}},{"name":"typed","generated":{"line":17,"column":19},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":8,"column":19}},{"generated":{"line":17,"column":24},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":8,"column":2}},{"generated":{"line":18,"column":0},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":10,"column":2}},{"generated":{"line":119,"column":0},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":110,"column":2}},{"name":"typed","generated":{"line":119,"column":9},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":110,"column":9}},{"generated":{"line":119,"column":14},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":110,"column":14}},{"name":"name","generated":{"line":119,"column":15},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":110,"column":15}},{"generated":{"line":119,"column":19},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":110,"column":14}},{"generated":{"line":119,"column":21},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":110,"column":21}},{"name":"any","generated":{"line":120,"column":0},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":111,"column":4}},{"name":"any","generated":{"line":120,"column":4},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":111,"column":4}},{"generated":{"line":120,"column":7},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":111,"column":7}},{"name":"formatString","generated":{"line":120,"column":9},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":111,"column":9}},{"generated":{"line":120,"column":23},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":110,"column":21}},{"generated":{"line":121,"column":0},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":112,"column":4}},{"name":"formatString","generated":{"line":121,"column":39},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":112,"column":39}},{"generated":{"line":122,"column":0},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":110,"column":21}},{"generated":{"line":122,"column":3},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":110,"column":14}},{"generated":{"line":122,"column":4},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":110,"column":2}},{"generated":{"line":123,"column":0},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":114,"column":1}},{"generated":{"line":123,"column":1},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":7,"column":0}},{"generated":{"line":123,"column":2},"source":"node_modules/mathjs/es/function/string/format.js","original":{"line":5,"column":7}}],"sources":{"node_modules/mathjs/es/function/string/format.js":"import { format as formatString } from '../../utils/string';\nimport { factory } from '../../utils/factory';\nvar name = 'format';\nvar dependencies = ['typed'];\nexport var createFormat =\n/* #__PURE__ */\nfactory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Format a value of any type into a string.\n   *\n   * Syntax:\n   *\n   *    math.format(value)\n   *    math.format(value, options)\n   *    math.format(value, precision)\n   *    math.format(value, callback)\n   *\n   * Where:\n   *\n   *  - `value: *`\n   *    The value to be formatted\n   *  - `options: Object`\n   *    An object with formatting options. Available options:\n   *    - `notation: string`\n   *      Number notation. Choose from:\n   *      - 'fixed'\n   *        Always use regular number notation.\n   *        For example '123.40' and '14000000'\n   *      - 'exponential'\n   *        Always use exponential notation.\n   *        For example '1.234e+2' and '1.4e+7'\n   *      - 'engineering'\n   *        Always use engineering notation.\n   *        For example '123.4e+0' and '14.0e+6'\n   *      - 'auto' (default)\n   *        Regular number notation for numbers having an absolute value between\n   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.\n   *        Lower bound is included, upper bound is excluded.\n   *        For example '123.4' and '1.4e7'.\n   *    - `precision: number`\n   *      A number between 0 and 16 to round the digits of the number. In case\n   *      of notations 'exponential', 'engineering', and 'auto', `precision`\n   *      defines the total number of significant digits returned.\n   *      In case of notation 'fixed', `precision` defines the number of\n   *      significant digits after the decimal point.\n   *      `precision` is undefined by default.\n   *    - `lowerExp: number`\n   *      Exponent determining the lower boundary for formatting a value with\n   *      an exponent when `notation='auto`. Default value is `-3`.\n   *    - `upperExp: number`\n   *      Exponent determining the upper boundary for formatting a value with\n   *      an exponent when `notation='auto`. Default value is `5`.\n   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.\n   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is\n   *      configured, and will output `0.(3)` when 'decimal' is configured.\n   * - `callback: function`\n   *   A custom formatting function, invoked for all numeric elements in `value`,\n   *   for example all elements of a matrix, or the real and imaginary\n   *   parts of a complex number. This callback can be used to override the\n   *   built-in numeric notation with any type of formatting. Function `callback`\n   *   is called with `value` as parameter and must return a string.\n   *\n   * When `value` is an Object:\n   *\n   * - When the object contains a property `format` being a function, this function\n   *   is invoked as `value.format(options)` and the result is returned.\n   * - When the object has its own `toString` method, this method is invoked\n   *   and the result is returned.\n   * - In other cases the function will loop over all object properties and\n   *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n   *\n   * When value is a function:\n   *\n   * - When the function has a property `syntax`, it returns this\n   *   syntax description.\n   * - In other cases, a string `'function'` is returned.\n   *\n   * Examples:\n   *\n   *    math.format(6.4)                                        // returns '6.4'\n   *    math.format(1240000)                                    // returns '1.24e6'\n   *    math.format(1/3)                                        // returns '0.3333333333333333'\n   *    math.format(1/3, 3)                                     // returns '0.333'\n   *    math.format(21385, 2)                                   // returns '21000'\n   *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'\n   *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'\n   *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'\n   *    math.format(12400,{notation: 'engineering'})            // returns '12.400e+3'\n   *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'\n   *\n   *    function formatCurrency(value) {\n   *      // return currency notation with two digits:\n   *      return '$' + value.toFixed(2)\n   *\n   *      // you could also use math.format inside the callback:\n   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})\n   *    }\n   *    math.format([2.1, 3, 0.016], formatCurrency}            // returns '[$2.10, $3.00, $0.02]'\n   *\n   * See also:\n   *\n   *    print\n   *\n   * @param {*} value                               Value to be stringified\n   * @param {Object | Function | number} [options]  Formatting options\n   * @return {string} The formatted value\n   */\n  return typed(name, {\n    any: formatString,\n    'any, Object | function | number': formatString\n  });\n});"},"lineCount":null}},"error":null,"hash":"74a05972423613de49f8d4fe8a797b09","cacheData":{"env":{}}}